// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduler.Data;

#nullable disable

namespace Scheduler.Migrations
{
    [DbContext(typeof(DBContextSystem))]
    [Migration("20240625062637_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Scheduler.Models.Course", b =>
                {
                    b.Property<int>("IDCRS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCRS"));

                    b.Property<int>("CRS_ACTIVE")
                        .HasColumnType("int");

                    b.Property<string>("CRS_A_NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CRS_CR_HOURS")
                        .HasColumnType("int");

                    b.Property<int>("CRS_NO")
                        .HasColumnType("int");

                    b.Property<string>("CRS_SPEC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCRS");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Scheduler.Models.DegreeProgresContent", b =>
                {
                    b.Property<int>("IdDC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDC"));

                    b.Property<int>("IDCRS")
                        .HasColumnType("int");

                    b.Property<int>("IDDegreeProgressPlan")
                        .HasColumnType("int");

                    b.Property<int>("SMST_NO")
                        .HasColumnType("int");

                    b.Property<int>("SPEC_CODE")
                        .HasColumnType("int");

                    b.Property<int>("SPEC_LVL")
                        .HasColumnType("int");

                    b.Property<int>("SPEC_YYT")
                        .HasColumnType("int");

                    b.HasKey("IdDC");

                    b.HasIndex("IDCRS");

                    b.HasIndex("IDDegreeProgressPlan");

                    b.ToTable("DegreeProgresContents");
                });

            modelBuilder.Entity("Scheduler.Models.DegreeProgressPlan", b =>
                {
                    b.Property<int>("IDDegreeProgressPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDegreeProgressPlan"));

                    b.Property<string>("College")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDDegreeProgressPlan");

                    b.ToTable("degreeProgressPlans");
                });

            modelBuilder.Entity("Scheduler.Models.Instructor", b =>
                {
                    b.Property<int>("IdInstructor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInstructor"));

                    b.Property<int>("Job_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdInstructor");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Scheduler.Models.PlanContent", b =>
                {
                    b.Property<int>("IdPlanContent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlanContent"));

                    b.Property<int>("IDCRS")
                        .HasColumnType("int");

                    b.Property<int>("IdStudyPlan")
                        .HasColumnType("int");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<int?>("prerequisite")
                        .HasColumnType("int");

                    b.HasKey("IdPlanContent");

                    b.HasIndex("IDCRS");

                    b.HasIndex("IdStudyPlan");

                    b.ToTable("PlanContents");
                });

            modelBuilder.Entity("Scheduler.Models.Progress", b =>
                {
                    b.Property<int>("IdProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProgress"));

                    b.Property<float>("Mark")
                        .HasColumnType("real");

                    b.Property<int>("StudentKeyStudent")
                        .HasColumnType("int");

                    b.Property<int>("courseIDCRS")
                        .HasColumnType("int");

                    b.HasKey("IdProgress");

                    b.HasIndex("StudentKeyStudent");

                    b.HasIndex("courseIDCRS");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("Scheduler.Models.Schedule", b =>
                {
                    b.Property<int>("IDScedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDScedule"));

                    b.Property<int?>("Approv_Schedule")
                        .HasColumnType("int");

                    b.Property<int>("studentsKeyStudent")
                        .HasColumnType("int");

                    b.HasKey("IDScedule");

                    b.HasIndex("studentsKeyStudent");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Scheduler.Models.Section", b =>
                {
                    b.Property<int>("IDSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSection"));

                    b.Property<DateTime?>("End_Monday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Sunday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Thursday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Tuesday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Wednesday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorsIdInstructor")
                        .HasColumnType("int");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Monday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start_Sunday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start_Thursday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start_Tuesday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start_Wednesday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("courseIDCRS")
                        .HasColumnType("int");

                    b.HasKey("IDSection");

                    b.HasIndex("InstructorsIdInstructor");

                    b.HasIndex("courseIDCRS");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Scheduler.Models.SectionSchedule", b =>
                {
                    b.Property<int>("IDSS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSS"));

                    b.Property<int>("IDScedule")
                        .HasColumnType("int");

                    b.Property<int>("IDSection")
                        .HasColumnType("int");

                    b.HasKey("IDSS");

                    b.HasIndex("IDScedule");

                    b.HasIndex("IDSection");

                    b.ToTable("sectionSchedules");
                });

            modelBuilder.Entity("Scheduler.Models.Student", b =>
                {
                    b.Property<int>("KeyStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyStudent"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Student")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("degreeProgressPlanIDDegreeProgressPlan")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studyPlanIdStudyPlan")
                        .HasColumnType("int");

                    b.HasKey("KeyStudent");

                    b.HasIndex("degreeProgressPlanIDDegreeProgressPlan");

                    b.HasIndex("studyPlanIdStudyPlan");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Scheduler.Models.StudyPlan", b =>
                {
                    b.Property<int>("IdStudyPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStudyPlan"));

                    b.Property<string>("College")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStudyPlan");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("Scheduler.Models.DegreeProgresContent", b =>
                {
                    b.HasOne("Scheduler.Models.Course", "course")
                        .WithMany("degree_Courses")
                        .HasForeignKey("IDCRS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduler.Models.DegreeProgressPlan", "DegreeProgressPlan")
                        .WithMany("degreeProgresContents")
                        .HasForeignKey("IDDegreeProgressPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeProgressPlan");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Scheduler.Models.PlanContent", b =>
                {
                    b.HasOne("Scheduler.Models.Course", "course")
                        .WithMany("plan_content")
                        .HasForeignKey("IDCRS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduler.Models.StudyPlan", "StudyPlan")
                        .WithMany()
                        .HasForeignKey("IdStudyPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyPlan");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Scheduler.Models.Progress", b =>
                {
                    b.HasOne("Scheduler.Models.Student", "Student")
                        .WithMany("progresses")
                        .HasForeignKey("StudentKeyStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduler.Models.Course", "course")
                        .WithMany("progresses")
                        .HasForeignKey("courseIDCRS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Scheduler.Models.Schedule", b =>
                {
                    b.HasOne("Scheduler.Models.Student", "students")
                        .WithMany("schedules")
                        .HasForeignKey("studentsKeyStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("students");
                });

            modelBuilder.Entity("Scheduler.Models.Section", b =>
                {
                    b.HasOne("Scheduler.Models.Instructor", "Instructors")
                        .WithMany("Sections")
                        .HasForeignKey("InstructorsIdInstructor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduler.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseIDCRS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructors");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Scheduler.Models.SectionSchedule", b =>
                {
                    b.HasOne("Scheduler.Models.Schedule", "schedule")
                        .WithMany("sectionSchedules")
                        .HasForeignKey("IDScedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduler.Models.Section", "section")
                        .WithMany("sectionSchedules")
                        .HasForeignKey("IDSection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("schedule");

                    b.Navigation("section");
                });

            modelBuilder.Entity("Scheduler.Models.Student", b =>
                {
                    b.HasOne("Scheduler.Models.DegreeProgressPlan", "degreeProgressPlan")
                        .WithMany("Student")
                        .HasForeignKey("degreeProgressPlanIDDegreeProgressPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduler.Models.StudyPlan", "studyPlan")
                        .WithMany()
                        .HasForeignKey("studyPlanIdStudyPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("degreeProgressPlan");

                    b.Navigation("studyPlan");
                });

            modelBuilder.Entity("Scheduler.Models.Course", b =>
                {
                    b.Navigation("degree_Courses");

                    b.Navigation("plan_content");

                    b.Navigation("progresses");
                });

            modelBuilder.Entity("Scheduler.Models.DegreeProgressPlan", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("degreeProgresContents");
                });

            modelBuilder.Entity("Scheduler.Models.Instructor", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Scheduler.Models.Schedule", b =>
                {
                    b.Navigation("sectionSchedules");
                });

            modelBuilder.Entity("Scheduler.Models.Section", b =>
                {
                    b.Navigation("sectionSchedules");
                });

            modelBuilder.Entity("Scheduler.Models.Student", b =>
                {
                    b.Navigation("progresses");

                    b.Navigation("schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
